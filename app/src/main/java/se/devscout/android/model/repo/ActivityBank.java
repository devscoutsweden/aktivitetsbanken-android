package se.devscout.android.model.repo;

import java.net.URI;
import java.util.List;

import se.devscout.android.model.Activity;
import se.devscout.android.model.ActivityHistory;
import se.devscout.android.model.ActivityHistoryData;
import se.devscout.android.model.ActivityKey;
import se.devscout.android.model.ActivityList;
import se.devscout.android.model.ActivityProperties;
import se.devscout.android.model.Category;
import se.devscout.android.model.CategoryKey;
import se.devscout.android.model.HistoryProperties;
import se.devscout.android.model.Media;
import se.devscout.android.model.MediaKey;
import se.devscout.android.model.MediaProperties;
import se.devscout.android.model.Rating;
import se.devscout.android.model.Reference;
import se.devscout.android.model.ReferenceKey;
import se.devscout.android.model.ReferenceProperties;
import se.devscout.android.model.SearchHistory;
import se.devscout.android.model.SearchHistoryData;
import se.devscout.android.model.User;
import se.devscout.android.model.UserKey;
import se.devscout.android.model.UserProfile;
import se.devscout.android.model.UserProperties;
import se.devscout.android.model.activityfilter.ActivityFilter;
import se.devscout.android.model.activityfilter.ActivityFilterFactory;
import se.devscout.android.model.repo.remote.OfflineException;
import se.devscout.android.util.http.UnauthorizedException;

public interface ActivityBank {

    Long DEFAULT_USER_ID = 1L; // <-- Must match the primary key id generated by SQLite when the database is initialized
    int DEFAULT_MINIMUM_ACTIVITIES_PER_CATEGORY = 10;

    List<? extends Activity> findActivity(ActivityFilter condition) throws UnauthorizedException;

    Activity createActivity(ActivityProperties properties);

    void deleteActivity(ActivityKey key);

    void updateActivity(ActivityKey key, ActivityProperties properties) throws UnauthorizedException;

    ActivityList readActivities(ActivityKey... keys) throws UnauthorizedException;

    /**
     * Returns activities related to the primary activity.
     *
     * @param primaryActivity         The activity for which related activities
     *                                should be returned/calculated.
     * @param forcedRelatedActivities The activities to consider to be related,
     *                                in case the method cannot determine the
     *                                information by itself or if the caller
     *                                wants to be explicit.
     * @return
     * @throws UnauthorizedException
     */
    List<? extends Activity> readRelatedActivities(ActivityKey primaryActivity, List<? extends ActivityKey> forcedRelatedActivities) throws UnauthorizedException;

    ActivityFilterFactory getFilterFactory();

    Reference createReference(ActivityKey key, ReferenceProperties properties);

    void deleteReference(ActivityKey key, ReferenceKey referenceKey);

    List<? extends Reference> readReferences(ActivityKey key);

    List<? extends Category> readCategories(int minActivitiesCount) throws UnauthorizedException;

    Category readCategoryFull(CategoryKey key);

    void setFavourite(ActivityKey activityKey, UserKey userKey) throws UnauthorizedException;

    void unsetFavourite(ActivityKey activityKey, UserKey userKey) throws UnauthorizedException;

    Boolean isFavourite(ActivityKey activityKey, UserKey userKey);

    List<? extends Activity> readActivityHistory(int limit, UserKey userKey);

    ActivityHistory createActivityHistory(HistoryProperties<ActivityHistoryData> properties, UserKey userKey);

    List<? extends SearchHistory> readSearchHistory(int limit, UserKey userKey);

    SearchHistory createSearchHistory(HistoryProperties<SearchHistoryData> properties, UserKey userKey);

    void deleteSearchHistory(int itemsToKeep);

    void addListener(ActivityBankListener listener);

    void removeListener(ActivityBankListener listener);

    boolean createAnonymousAPIUser();

    void updateUser(UserKey key, UserProperties properties) throws UnauthorizedException;

    User readUser(UserKey key);

    UserProfile readUserProfile();

    void updateUserProfile(UserProperties properties) throws UnauthorizedException, OfflineException;

    Media readMediaItem(MediaKey key);

    URI getMediaItemURI(MediaProperties mediaProperties, int width, int height);

    Rating readRating(ActivityKey activityKey, UserKey userKey);

    void setRating(ActivityKey activityKey, UserKey userKey, int rating);

    void unsetRating(ActivityKey activityKey, UserKey userKey);

    /**
     * Returns information about when certain lists/tables/entities of the database was last changed.
     */
    ModificationCounters getModificationCounters();

    List<String> getSystemMessages(String key);
}
